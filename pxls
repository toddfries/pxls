#!/usr/bin/perl

# Copyright (c) 2023 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 
use strict;
use warnings;

# Use the X11::Protocol module
use Getopt::Std;
use X11::Protocol;

# Create a new X11::Protocol object
our $X = X11::Protocol->new;

$X->init_extensions;

# declaration
our $opt_A; # all even no property window ids
our $opt_a; # attributes
our $opt_e; # list extensions only
our $opt_r; # regex search
our $opt_v; # verbose

# defaults
$opt_v = 0;

getopts('Aaefr:v');

if (defined($opt_e)) {
	my @extensions = $X->ListExtensions;
	foreach my $ext (sort @extensions) {
		print " ext '${ext}'\n";
	}
	exit(0);
}

our $xcache = { };


show_tree($X->root, '|- ', "|  ");

sub show_tree { 
	my ($wid, $pre0, $preN) = @_;

	my ($rootid, $parent, @children) = $X->QueryTree( $X->root );

	my $topmsg = "QueryTree($rootid)\n";
	my $topseen = 0;
	if (!@children) {
		return;
	}
	
# Print out the list of applications and their titles
foreach my $child (@children) {
	my $hide = 0;
	# if regex, hide by default
	if (defined($opt_r)) {
		$hide = 1;
	}
	if (defined($opt_r) && $wid =~ /${opt_r}/i) {
		$hide = 0;
	}

	my $output = "";
	# $child is a window id
	$output .= sprintf "${pre0}Window 0x%08x:\n", $child;
	my @props = $X->ListProperties($child);

	my $pmaxlen = 1;
	foreach my $prop (@props) {
		my $pname = $X->atom_name($prop);
		if (length($pname) > $pmaxlen) {
			$pmaxlen = length($pname);
		}
	}
	my $pnotempty = 0;
	foreach my $prop (sort { $X->atom_name($a) cmp $X->atom_name($b) }
	    @props) {
		my $pstr = get_nprop($child, $prop);
		if (defined($pstr) && length($pstr) > 0) {
			$pnotempty++;
			if (defined($opt_r)) {
				if ($pstr =~ /${opt_r}/i) {
					$hide = 0;
				}
			}
			$output .= sprintf "${preN}\t %-${pmaxlen}s(%3d) ", $X->atom_name($prop), $prop;
			my $str = "";
			foreach my $s (split(/\0/,$pstr)) {
				$str .= "<$s>, ";
			}
			$str =~ s/>, $/>/;
			$output .= "$str";
			$output .= "\n";
		} else {
			$output .= sprintf "${preN}\t %-${pmaxlen}s(%3d) empty\n", $X->atom_name($prop), $prop;
		}
	}
	if (!defined($opt_r) && !defined($opt_A) && $pnotempty == 0) {
		$hide = 1;
	}
	
	my %attr = $X->GetWindowAttributes($child);
	if (%attr && defined($opt_a)) {
		my $maxlen = 1;
		foreach my $key (keys %attr) {
			if (length($key) > $maxlen) {
				$maxlen = length($key);
			}
		}

		foreach my $key (sort keys %attr) {
			$output .= sprintf "${preN}\t%${maxlen}s: %s\n", $key, $attr{$key};
			if (defined($opt_r)) {
				if ($attr{$key} =~ /${opt_r}/i) {
					$hide = 0;
				}
			}
		}
	}
	if ($hide == 0) {
		if ($topseen == 0) {
			print $topmsg;
			$topseen++;
		}
		print $output;
	}
	#show_tree($child, $preN."\`--", $preN);
}
}

sub get_prop {
	my ($win, $name) = @_;

	my @list = $X->GetProperty($win,
		$X->atom($name),
		$X->atom("STRING"),
		0, 65535, 0);
	return $list[0];
}
sub get_nprop {
	my ($win, $atomid) = @_;

	my $astr = { };

	my $aname = "STRING";
	my $aid = $X->atom($aname);

	# first request STRING type, it tells us the real type in $atype
	my ($raw, $atype, $format, $d) = $X->GetProperty($win,
		$atomid,
		$X->atom($aname),
		0, 65535, 0);
	# If not the same, requst again with proper type
	if ($atype != $aid) {
		($raw, $atype, $format, $d) = $X->GetProperty($win,
			$atomid,
			$atype,
			0, 65535, 0);
	}
	$astr->{atype} = $atype;

	# now we 'handle' various atom types, defaulting to hex if unknown
	if ($atype == $X->atom("STRING")) {
		return $raw;
	} elsif ($atype == $X->atom("UTF8_STRING")) {
		return $raw;
	} elsif ($atype == $X->atom("CARDINAL")) {
		return decode_dec($raw, $format);

	} elsif ($atype == $X->atom("WM_SIZE_HINTS")) {
		my ($flags, $pad1, $pad2, $pad3, $min_width, $min_height, $max_width, $max_height, $width_inc, $height_inc, $min_aspect_x, $min_aspect_y, $max_aspect_x, $max_aspect_y, $base_width, $base_height, $win_gravity) = unpack('LLLLssssssssssss', $raw);
		if (!defined($win_gravity)) {
			$win_gravity = "";
		}
		return sprintf "flags=0x%x, min/max width/height=%d/%d/%d/%d,".
			" width/height inc=%d/%d,".
			" min/max aspect x/y=%d/%d/%d/%d,".
			" base width/height=%d/%d,".
			" win_gravity=%s",
			$flags,
			$min_width, $max_width, $min_height, $max_height,
			$width_inc, $height_inc,
			$min_aspect_x, $max_aspect_x, $min_aspect_y, $max_aspect_y,
			$base_width, $base_height,
			$win_gravity;
	} elsif ($atype == $X->atom("ATOM")) {
		return decode_atoms($raw, $format);
	} else {
		foreach my $t (("_MOTIF_WM_HINTS",
			"WM_STATE",
			"WM_HINTS",
			"WM_CLIENT_LEADER",
			"WINDOW")) {
			if ($atype == $X->atom($t)) {
				return decode_hex($raw, $format);
			}
		}
	}
	# show some helpful hints if verbose and not known to populate above
	if($opt_v>0) {
	    printf "%s[%s] len/aname(no)/format/d=%s/%s(%s)/%s/%s\n",
		$X->atom_name($atomid), $atomid,
		length($raw), $X->atom_name($atype), $atype,
		$format, $d;
	}
	return decode_hex($raw, $format);
}

sub decode_hex {
		my ($raw, $format) = @_;
		my $atom_len = $format/8;
		my $index = 0;
		my $retstr = "";
		while ($index < length($raw)) {
			my ($low, $high, $a, $b) = unpack("x${index}C C C C", $raw);
			my $aid = $low + ($high << 8) + ($a << 16) + ($b << 24);
			$retstr .= sprintf "0x%x ", $aid;
			$index += $atom_len;
		}
		$retstr =~ s/\s+$//;
		return $retstr;
}
sub decode_atoms {
		my ($raw, $format) = @_;
		my $atom_len = $format/8;
		my $index = 0;
		my $retstr = "";
		while ($index < length($raw)) {
			my ($low, $high, $a, $b) = unpack("x${index}C C C C", $raw);
			my $aid = $low + ($high << 8) + ($a << 16) + ($b << 24);
			$retstr .= sprintf "%s ", $X->atom_name($aid);
			$index += $atom_len;
		}
		$retstr =~ s/\s+$//;
		return $retstr;
}

sub decode_dec {
	my ($raw, $format) = @_;
	my ($low, $high, $a, $b) = unpack('C C C C', $raw);
	my $pid = $low + ($high << 8) + ($a << 16) + ($b << 24);
	return sprintf "%6d", $pid;
}
